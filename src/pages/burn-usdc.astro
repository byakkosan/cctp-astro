---
import BaseLayout from '../layouts/BaseLayout.astro';
import { actions } from 'astro:actions';

const sourceWalletId = await Astro.session?.get('sourceWalletId');
const burnUsdcResponse = Astro.getActionResult(actions.burnUsdc);
if (burnUsdcResponse && !burnUsdcResponse.error) {
  Astro.session?.set('txHash', burnUsdcResponse.data.txHash);
  Astro.session?.set('recipientAddress', burnUsdcResponse.data.recipientAddress);
  Astro.session?.set('transferAmount', burnUsdcResponse.data.transferAmount);
  Astro.session?.set('burnTxId', burnUsdcResponse.data.id);
  return Astro.redirect('/receive-attestation');
}
---

<BaseLayout title="Burn USDC on source chain">
  <section>
		<h2>Burn USDC on source chain</h2>
		<p>Next, the <code>depositForBurn</code> function from TokenMessengerV2 contract is called to burn USDC on that source chain. For this step, you are interacting with the TokenMessenger contract on the source chain. </p>
	</section>
  <section>
    <form method="POST" action={actions.burnUsdc}>
      <div class="input-wrapper">
        <label for="sourceWalletId">Wallet ID</label>
        <input type="text" id="sourceWalletId" name="sourceWalletId" value={sourceWalletId} readonly />
      </div>

      <div class="input-wrapper">
        <label for="transferAmount">Transfer Amount (USDC)</label>
        <input type="number" id="transferAmount" name="transferAmount" placeholder="100" required />
      </div>

      <div class="input-wrapper">
        <label for="destinationAddress">Destination Address</label>
        <input type="text" id="destinationAddress" name="destinationAddress" placeholder="0x5a65e51e5fae3ef18b8dbe73aaf2673fc29e42c5" required />
      </div>
      <button>Burn</button>
    </form>
  </section>

{burnUsdcResponse?.error && <p>Transaction failed. Please check your transaction logs for details.</p>}

<style>
  h2 {
    text-align: center;
    margin-block-end: var(--space-xs);
  }

  form {
		max-width: 20em;
		display: flex;
		flex-direction: column;
		gap: var(--space-m);
		margin-inline: auto;
	}

  .input-wrapper {
    display: flex;
    flex-direction: column;
  }
</style>
